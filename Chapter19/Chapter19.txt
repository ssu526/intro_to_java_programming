19.1 (Revising Listing 19.1) Revise the GenericStack class in Listing 19.1 to implement
it using an array rather than an ArrayList. You should check the array size
before adding a new element to the stack. If the array is full, create a new array that
doubles the current array size and copy the elements from the current array to the
new array.

public class GenericStack<E>{
	private int capacity = 100;
	private int size=0;
	private E[] list = (E[])new Object[capacity];

	public GenericStack(){
	}

	public int getSize(){
		return size;
	}

	public E peek(){
		return list[size-1];
	}

	public void push(E o){
		if(size==capacity){
			capacity=capacity*2;
			E[] tempList = (E[])new Object[capacity];
			System.arraycopy(list,0,tempList,0,list.length);
			list=tempList;
			list[size]=o;
			size++;
				
		}else{
			list[size]=o;
			size++;
		}
	}

	public E pop(){
		E o = list[size-1];
		list[size-1]=null;
		size--;
		return o;
	}

	public boolean isEmpty(){
		return (size==0) ? true:false;
	}

	@Override
	public String toString(){
		return list.toString();
	}


	public static void main(String[] args){
		GenericStack<Integer> stack = new GenericStack<>();
		System.out.println(stack.isEmpty());
		for(int i=0;i<100;i++){
			stack.push(i);
		}

		System.out.println(stack.getSize());
		stack.push(101);
		System.out.println(stack.peek());
		System.out.println(stack.pop());
		System.out.println(stack.peek());
	}
}

=========================================================================================
19.2 (Implement GenericStack using inheritance) In Listing 19.1, GenericStack is
implemented using composition. Define a new stack class that extends ArrayList.
Draw the UML diagram for the classes and then implement GenericStack.
Write a test program that prompts the user to enter five strings and displays them in
reverse order.
import java.util.*; 

public class GenericStack<E> extends ArrayList<E>{
	public GenericStack(){
	}

	public int getSize(){
		return size();
	}

	public E peek(){
		return get(size()-1);
	}

	public void push(E o){
		add(o);
	}

	public E pop(){
		E o = get(size()-1);
		remove(size()-1);
		return o;
	}

	public boolean isEmpty(){
		return super.isEmpty();
	}

	public static void main(String[] args){
		GenericStack<String> stack = new GenericStack<>();
		stack.push("Read");
		stack.push("Code");
		stack.push("Craft");
		stack.push("Kids");
		stack.push("Home");

		for(int i=stack.getSize()-1;i>=0;i--){
			System.out.println(stack.pop());
		}
	}

}


=========================================================================================
19.3 (Distinct elements in ArrayList) Write the following method that returns a new
ArrayList. The new list contains the non-duplicate elements from the original list.

public static <E> ArrayList<E> removeDuplicates(ArrayList<E> list)

import java.util.*;

public class removeDuplicates{
	public static void main(String[] args){
		ArrayList<String> list = new ArrayList<>();
		list.add("Read");
		list.add("Code");
		list.add("Craft");
		list.add("Kids");
		list.add("Home");
		list.add("Read");
		list.add("Code");
		list.add("Craft");
		list.add("Kids");
		list.add("Home");
	
		System.out.println(removeDuplicates(list));
		
	}

	public static <E> ArrayList<E> removeDuplicates(ArrayList<E> list){
		ArrayList<E> newList = new ArrayList<>();
		for(int i=0;i<list.size();i++){
			if(!newList.contains(list.get(i))){
				newList.add(list.get(i));
			}
		}

		return newList;
	}
}

=========================================================================================
19.4 (Generic linear search) Implement the following generic method for linear search.
public static <E extends Comparable<E>> int linearSearch(E[] list, E key)
public class LinearSearch{
	public static void main(String[] args){
		Integer[] list = new Integer[10];
		Integer key=5;
		for(int i=0;i<10;i++){
			list[i]=(int)(Math.random()*10)+1;
		}

		for(int i:list){
		    System.out.println(list[i]);
		}
		System.out.println(linearSearch(list, key));
	}

	public static <E extends Comparable<E>> int linearSearch(E[] list, E key){
	    int index=-1;
		for(int i=0;i<list.length;i++){
			if(list[i]==key){
				index=i;
			}
		}
		return index;
	}
}





=========================================================================================
19.5 (Maximum element in an array) Implement the following method that returns the
maximum element in an array.
public static <E extends Comparable<E>> E max(E[] list)

public class MaxInArray{
	public static void main(String[] args){
	    
		Integer[] list = new Integer[10];
		for(int i=0;i<10;i++){
			list[i]=(int)(Math.random()*100)+1;
		}

		for(int k=0;k<list.length;k++){
		    System.out.println(list[k]);
		}

		System.out.println(max(list)+"\n");
    
		String[] list2 ={"A","C","a","b"};
		System.out.println(max(list2));
	}

	public static <E extends Comparable<E>> E max(E[] list){
		E max=list[0];
		for(int i=1;i<list.length;i++){
			if(list[i].compareTo(max)>0){
				max=list[i];
			}
		}

		return max;
	}
}

=========================================================================================
public class MaxIn2Array{
	public static void main(String[] args){
		Integer[][] matrix = new Integer[5][5];
		for(int r=0;r<5;r++){
			for(int c=0;c<5;c++){
				matrix[r][c]=(int)(Math.random()*100)+1;
			}
		}

		for(int i=0;i<5;i++){
			for(int j=0;j<5;j++){
				System.out.printf("%3d ",matrix[i][j]);
			}
			System.out.println("");
		}

		System.out.println(max(matrix));
	}

	public static <E extends Comparable<E>> E max(E[][] matrix){
		E max = matrix[0][0];
		for(int i=0;i<matrix.length;i++){
			for(int j=0;j<matrix[0].length;j++){
				if(matrix[i][j].compareTo(max)>0){
					max=matrix[i][j];
				}
			}
		}
		return max;
	}
}


=========================================================================================
19.7 (Generic binary search) Implement the following method using binary search.
public static <E extends Comparable<E>> int binarySearch(E[] list, E key)
public class BinarySearch{
	public static void main(String[] args){
		Integer[] list = new Integer[10];
		for(int i=0;i<10;i++){
			list[i]=(int)(Math.random()*10)+1;
		}

		for(int k=0;k<list.length;k++){
		    System.out.print(list[k]+" ");
		}

		System.out.println("\n"+search(list,5));
	}

	public static <E extends Comparable<E>> int search(E[] list, E key){
		int middle=(int)list.length/2;
		int high=list.length-1;
		int low=0;

		while(high>low){
			if(list[middle].equals(key)){
				return middle;
			}else{
				if(list[middle].compareTo(key)<0){
					low=middle+1;
					high=list.length-1;
				}else{
					low=0;
					high=middle-1;
				}
				middle=(high-low)/2;
			}
		}

		return middle;
	}
}



=========================================================================================
19.8 (Shuffle ArrayList) Write the following method that shuffles an ArrayList:
public static <E> void shuffle(ArrayList<E> list)

import java.util.*;

public class Shuffle{
	public static void main(String[] args){

		ArrayList<Integer> list = new ArrayList<>();
		for(int i=0;i<10;i++){
			list.add((int)(Math.random()*10)+1);
		}

		for(int k=0;k<list.size();k++){
		    System.out.print(list.get(k)+" ");
		}

		shuffle(list);
		
		System.out.println("");
		for(int j=0;j<list.size();j++){
		    System.out.print(list.get(j)+" ");
		}
	}

	public static <E> void shuffle(ArrayList<E> list){
		int size = list.size();

		for(int i=1;i<size;i++){
			int n = (int)(Math.random()*(size-i))+1;
			E temp = list.get(i-1);
			list.set(i-1, list.get(n));
			list.set(n,temp);
		}
	}
}



=========================================================================================
19.9 (Sort ArrayList) Write the following method that sorts an ArrayList:
public static <E extends Comparable<E>> void sort(ArrayList<E> list)


import java.util.*;

public class SortArrayList{
	public static void main(String[] args){
		ArrayList<Integer> list = new ArrayList<>();
		for(int i=0;i<10;i++){
			list.add((int)(Math.random()*10)+1);
		}

		for(int k=0;k<list.size();k++){
		    System.out.print(list.get(k)+" ");
		}

		sort(list);
		
		System.out.println("");
		for(int j=0;j<list.size();j++){
		    System.out.print(list.get(j)+" ");
		}
	}

	public static <E extends Comparable<E>> void sort(ArrayList<E> list){
		int size = list.size();

		for(int i=0;i<size;i++){
			for(int j=i+1;j<size;j++){
				if(list.get(j).compareTo(list.get(i))>0){
					E temp=list.get(i);
					list.set(i,list.get(j));
					list.set(j,temp);
				}
			}
		}
	}
}


=========================================================================================
19.10 (Largest element in ArrayList) Write the following method that returns the largest
element in an ArrayList:
public static <E extends Comparable<E>> E max(ArrayList<E> list)

import java.util.*;

public class SortArrayList{
	public static void main(String[] args){
		ArrayList<Integer> list = new ArrayList<>();
		for(int i=0;i<10;i++){
			list.add((int)(Math.random()*100)+1);
		}

		for(int k=0;k<list.size();k++){
		    System.out.print(list.get(k)+" ");
		}
        System.out.println("");
		System.out.println(max(list));
	}

	public static <E extends Comparable<E>> E max(ArrayList<E> list){
		E max = list.get(0);

		for(int i=1;i<list.size();i++){
			if(list.get(i).compareTo(max)>0){
				max=list.get(i);
			}
		}
		return max;
	}
}














